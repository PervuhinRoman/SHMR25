import '../../domain/models/category/category.dart';
import '../services/api_service.dart';
import 'category_repo.dart';
import '../database/transaction_database.dart';
import 'package:drift/drift.dart';
import 'dart:developer';

class CategoryRepoImpl implements CategoryRepository {
  final ApiService _apiService;
  final AppDatabase _database;

  CategoryRepoImpl([ApiService? apiService, AppDatabase? database])
    : _apiService = apiService ?? ApiService(),
      _database = database ?? AppDatabase.instance;

  final List<Category> _categories = [
    Category(id: 1, name: '–ú', emoji: 'üí∏', isIncome: true),
    Category(id: 2, name: '–û', emoji: 'ü•©', isIncome: false),
    Category(id: 3, name: '–ö', emoji: 'üí°', isIncome: true),
    Category(id: 4, name: '–ò', emoji: 'üöå', isIncome: false),
  ];

  @override
  Future<List<Category>> getAllCategories() async {
    log('üîÑ getAllCategories: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'CategoryRepo');
    try {
      log('üåê getAllCategories: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏...', name: 'CategoryRepo');
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
      final categories = await _apiService.getCategories();
      log('‚úÖ getAllCategories: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ —Å–µ—Ç–∏ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'CategoryRepo');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      log('üíæ getAllCategories: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Drift-–∫—ç—à...', name: 'CategoryRepo');
      await saveCategoriesDrift(categories);
      log('‚úÖ getAllCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à', name: 'CategoryRepo');
      
      return categories;
    } catch (e) {
      log('‚ùå getAllCategories: –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e', name: 'CategoryRepo');
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      try {
        log('üì± getAllCategories: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Drift-–∫—ç—à–∞...', name: 'CategoryRepo');
        final cachedCategories = await getCategoriesDrift();
        log('üì± getAllCategories: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞ ${cachedCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'CategoryRepo');
        if (cachedCategories.isNotEmpty) {
          log('‚úÖ getAllCategories: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞', name: 'CategoryRepo');
          return cachedCategories;
        } else {
          log('‚ö†Ô∏è getAllCategories: –∫—ç—à –ø—É—Å—Ç', name: 'CategoryRepo');
        }
      } catch (cacheError) {
        log('‚ùå getAllCategories: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –∫—ç—à–∞: $cacheError', name: 'CategoryRepo');
        // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      }
      
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      log('üîÑ getAllCategories: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ (${_categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)', name: 'CategoryRepo');
      await Future.delayed(const Duration(milliseconds: 500));
      return _categories;
    }
  }

  @override
  Future<List<Category>> getCategoriesByType(bool isIncome) async {
    log('üîÑ getCategoriesByType: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ isIncome=$isIncome', name: 'CategoryRepo');
    try {
      log('üåê getCategoriesByType: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏...', name: 'CategoryRepo');
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
      final categories = await _apiService.getCategoriesByType(isIncome);
      log('‚úÖ getCategoriesByType: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ —Å–µ—Ç–∏ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ isIncome=$isIncome', name: 'CategoryRepo');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ)
      log('üíæ getCategoriesByType: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Drift-–∫—ç—à...', name: 'CategoryRepo');
      final allCategories = await _apiService.getCategories();
      await saveCategoriesDrift(allCategories);
      log('‚úÖ getCategoriesByType: –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à', name: 'CategoryRepo');
      
      return categories;
    } catch (e) {
      log('‚ùå getCategoriesByType: –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e', name: 'CategoryRepo');
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      try {
        log('üì± getCategoriesByType: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Drift-–∫—ç—à–∞...', name: 'CategoryRepo');
        final cachedCategories = await getCategoriesByTypeDrift(isIncome);
        log('üì± getCategoriesByType: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞ ${cachedCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ isIncome=$isIncome', name: 'CategoryRepo');
        if (cachedCategories.isNotEmpty) {
          log('‚úÖ getCategoriesByType: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞', name: 'CategoryRepo');
          return cachedCategories;
        } else {
          log('‚ö†Ô∏è getCategoriesByType: –∫—ç—à –ø—É—Å—Ç –¥–ª—è —Ç–∏–ø–∞ isIncome=$isIncome', name: 'CategoryRepo');
        }
      } catch (cacheError) {
        log('‚ùå getCategoriesByType: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –∫—ç—à–∞: $cacheError', name: 'CategoryRepo');
        // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      }
      
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      final fallbackCategories = _categories
          .where((category) => category.isIncome == isIncome)
          .toList();
      log('üîÑ getCategoriesByType: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ (${fallbackCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ isIncome=$isIncome)', name: 'CategoryRepo');
      await Future.delayed(const Duration(milliseconds: 500));
      return fallbackCategories;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ Drift-–∫—ç—à
  Future<void> saveCategoriesDrift(List<Category> categories) async {
    log('üíæ saveCategoriesDrift: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'CategoryRepo');
    try {
      final categoriesData = categories.map((category) => 
        CategoryDBCompanion(
          id: Value(category.id),
          name: Value(category.name),
          emoji: Value(category.emoji),
          isIncome: Value(category.isIncome),
        )
      ).toList();
      
      await _database.saveCategories(categoriesData);
      log('‚úÖ saveCategoriesDrift: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Drift', name: 'CategoryRepo');
    } catch (e) {
      log('‚ùå saveCategoriesDrift: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Drift: $e', name: 'CategoryRepo');
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Drift-–∫—ç—à–∞
  Future<List<Category>> getCategoriesDrift() async {
    log('üì± getCategoriesDrift: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Drift', name: 'CategoryRepo');
    try {
      final categoriesData = await _database.getCategories();
      log('üì± getCategoriesDrift: –ø–æ–ª—É—á–µ–Ω–æ ${categoriesData.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Drift', name: 'CategoryRepo');
      final categories = categoriesData.map((data) => 
        Category(
          id: data.id,
          name: data.name,
          emoji: data.emoji,
          isIncome: data.isIncome,
        )
      ).toList();
      log('‚úÖ getCategoriesDrift: —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ Category –æ–±—ä–µ–∫—Ç—ã', name: 'CategoryRepo');
      return categories;
    } catch (e) {
      log('‚ùå getCategoriesDrift: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Drift: $e', name: 'CategoryRepo');
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ç–∏–ø—É –∏–∑ Drift-–∫—ç—à–∞
  Future<List<Category>> getCategoriesByTypeDrift(bool isIncome) async {
    log('üì± getCategoriesByTypeDrift: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–ø–∞ isIncome=$isIncome –∏–∑ Drift', name: 'CategoryRepo');
    try {
      final categoriesData = await _database.getCategoriesByType(isIncome);
      log('üì± getCategoriesByTypeDrift: –ø–æ–ª—É—á–µ–Ω–æ ${categoriesData.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∏–ø–∞ isIncome=$isIncome –∏–∑ Drift', name: 'CategoryRepo');
      final categories = categoriesData.map((data) => 
        Category(
          id: data.id,
          name: data.name,
          emoji: data.emoji,
          isIncome: data.isIncome,
        )
      ).toList();
      log('‚úÖ getCategoriesByTypeDrift: —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ Category –æ–±—ä–µ–∫—Ç—ã', name: 'CategoryRepo');
      return categories;
    } catch (e) {
      log('‚ùå getCategoriesByTypeDrift: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Drift: $e', name: 'CategoryRepo');
      rethrow;
    }
  }
}
