import 'dart:developer';

import 'package:shmr_finance/data/repositories/category_repo.dart';
import 'package:shmr_finance/data/repositories/transaction_repo.dart';

import '../../domain/models/account/account.dart';
import '../../domain/models/category/category.dart';
import '../../domain/models/transaction/transaction.dart';
import 'account_repo.dart';
import 'package:dio/dio.dart';
import 'package:intl/intl.dart';
import '../database/transaction_database.dart';

class TransactionRepoImp implements TransactionRepository {
  final CategoryRepository _categoryRepo;
  final AccountRepository _accountRepo;
  final TransactionDatabase _transactionDatabase;
  final List<Transaction> _transactions = [
    Transaction(
      id: 1,
      accountId: 1,
      categoryId: 1,
      amount: '50000.00',
      transactionDate: DateTime.now(),
      comment: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    ),
    Transaction(
      id: 2,
      accountId: 1,
      categoryId: 2,
      amount: '1000.00',
      transactionDate: DateTime.now(),
      comment: '–ü—Ä–æ–¥—É–∫—Ç—ã',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    ),
  ];

  TransactionRepoImp(
    this._accountRepo,
    this._categoryRepo, [
    TransactionDatabase? transactionDatabase,
  ]) : _transactionDatabase =
           transactionDatabase ?? TransactionDatabase.instance;

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
  Future<Category> _getCategoryById(int categoryId) async {
    final categories = await _categoryRepo.getAllCategories();
    return categories.firstWhere(
      (category) => category.id == categoryId,
      orElse: () => throw Exception('Category not found'),
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ –ø–æ ID
  Future<AccountBrief> _getAccountBriefById(int accountId) async {
    if (accountId == 0) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –∫—ç—à–∞
      return AccountBrief(
        id: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID 1 –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç",
        balance: "0.00",
        currency: "RUB",
      );
    }
    final account = await _accountRepo.getAccountById(accountId);
    return AccountBrief(
      id: account.id,
      name: account.name,
      balance: account.balance,
      currency: account.currency,
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Transaction –≤ TransactionResponse
  Future<TransactionResponse> _toTransactionResponse(
    Transaction transaction,
  ) async {
    final category = await _getCategoryById(transaction.categoryId);
    final account = await _getAccountBriefById(transaction.accountId);

    return TransactionResponse(
      id: transaction.id,
      account: account,
      category: category,
      amount: transaction.amount,
      transactionDate: transaction.transactionDate,
      comment: transaction.comment,
      createdAt: transaction.createdAt,
      updatedAt: transaction.updatedAt,
    );
  }

  @override
  Future<List<TransactionResponse>> getPeriodTransactionsByAccount(
    int accountId, {
    DateTime? startDate,
    DateTime? endDate,
  }) async {
    try {
      log(
        'üåê –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ $accountId, –ø–µ—Ä–∏–æ–¥: ${startDate?.toIso8601String().substring(0, 10)} - ${endDate?.toIso8601String().substring(0, 10)}',
        name: 'TransactionRepo',
      );
      // TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ä–∞–±–æ—Ç—É DIO –≤ Service
      final dio = Dio();
      final response = await dio.get(
        'https://shmr-finance.ru/api/v1/transactions/account/$accountId/period',
        queryParameters: {
          'startDate': DateFormat('yyyy-MM-dd').format(startDate!),
          'endDate': DateFormat('yyyy-MM-dd').format(endDate!),
        },
        options: Options(
          headers: {'Authorization': 'Bearer BpSpdGeoNdjhGmR79DByflxf'},
        ),
      );

      log(
        'üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}',
        name: 'TransactionRepo',
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Freezed –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      final List<dynamic> rawData = response.data;
      log(
        'üìä –°—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: ${rawData.length}',
        name: 'TransactionRepo',
      );
      final List<TransactionResponse> responses = [];

      for (final item in rawData) {
        try {
          if (item is Map<String, dynamic>) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fromJson
            final transactionResponse = TransactionResponse.fromJson(item);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω—É–∂–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            // TODO: —É–±—Ä–∞—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
            if (transactionResponse.account.id == accountId) {
              responses.add(transactionResponse);
            }
          }
        } catch (e) {
          log('Error parsing transaction: $e', name: 'TransactionRepo');
          continue;
        }
      }

      log(
        'üìä –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${responses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        name: 'TransactionRepo',
      );
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
      var filteredResponses = responses;
      final startOfDay = startDate.copyWith(
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
        microsecond: 0,
      );
      filteredResponses =
          filteredResponses
              .where(
                (t) =>
                    t.transactionDate.isAtSameMomentAs(startOfDay) ||
                    t.transactionDate.isAfter(startOfDay),
              )
              .toList();
      final endOfDay = endDate.copyWith(
        hour: 23,
        minute: 59,
        second: 59,
        millisecond: 999,
        microsecond: 999,
      );
      filteredResponses =
          filteredResponses
              .where(
                (t) =>
                    t.transactionDate.isAtSameMomentAs(endOfDay) ||
                    t.transactionDate.isBefore(endOfDay),
              )
              .toList();

      log(
        'üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º: ${filteredResponses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        name: 'TransactionRepo',
      );
      return filteredResponses;
    } catch (e) {
      log(
        '‚ùå Error in getPeriodTransactionsByAccount: $e',
        name: 'TransactionRepo',
      );
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return [];
    }
  }

  @override
  Future<TransactionResponse> getTransaction(int id) async {
    await Future.delayed(const Duration(milliseconds: 500));
    final transaction = _transactions.firstWhere((t) => t.id == id);
    return _toTransactionResponse(transaction);
  }

  @override
  Future<TransactionResponse> createTransaction(
    TransactionRequest request,
  ) async {
    await Future.delayed(const Duration(milliseconds: 500));
    final newTransaction = Transaction(
      id: _transactions.length + 1,
      accountId: request.accountId,
      categoryId: request.categoryId,
      amount: request.amount,
      transactionDate: request.transactionDate,
      comment: request.comment,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    _transactions.add(newTransaction);
    return _toTransactionResponse(newTransaction);
  }

  @override
  Future<TransactionResponse> updateTransaction(
    int id,
    TransactionRequest request,
  ) async {
    await Future.delayed(const Duration(milliseconds: 500));
    final index = _transactions.indexWhere((t) => t.id == id);
    if (index == -1)
      throw Exception(
        'Transaction not found',
      ); // TODO: –∫—É–¥–∞ –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–º...

    final updatedTransaction = Transaction(
      id: id,
      accountId: request.accountId,
      categoryId: request.categoryId,
      amount: request.amount,
      transactionDate: request.transactionDate,
      comment: request.comment,
      createdAt: _transactions[index].createdAt,
      updatedAt: DateTime.now(),
    );

    _transactions[index] = updatedTransaction;
    return _toTransactionResponse(updatedTransaction);
  }

  @override
  Future<void> deleteTransaction(int id) async {
    await Future.delayed(const Duration(milliseconds: 500));
    _transactions.removeWhere((t) => t.id == id);
  }

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  Future<void> saveTodayTransactions(List<Transaction> transactions) async {
    log(
      'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –∫—ç—à: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      name: 'TransactionRepo',
    );
    await _transactionDatabase.clearTransactions();
    for (final t in transactions) {
      await _transactionDatabase.insertTransaction({
        'id': t.id.toString(),
        'amount': double.tryParse(t.amount) ?? 0.0,
        'category': t.categoryId.toString(),
        'date': t.transactionDate.toIso8601String().substring(0, 10),
        'note': t.comment ?? '',
      });
    }
    log(
      '‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à',
      name: 'TransactionRepo',
    );
  }

  Future<List<TransactionResponse>> getTodayTransactions() async {
    final today = DateTime.now();
    final dateStr = today.toIso8601String().substring(0, 10);
    final maps = await _transactionDatabase.getTransactionsByDate(dateStr);
    final List<TransactionResponse> responses = [];
    for (final map in maps) {
      final transaction = Transaction(
        id: int.tryParse(map['id'].toString()) ?? 0,
        accountId: 0, // –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        categoryId: int.tryParse(map['category'].toString()) ?? 0,
        amount: map['amount'].toString(),
        transactionDate: DateTime.parse(map['date']),
        comment: map['note'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      try {
        final category = await _getCategoryById(transaction.categoryId);
        final account = await _getAccountBriefById(transaction.accountId);
        responses.add(
          TransactionResponse(
            id: transaction.id,
            account: account,
            category: category,
            amount: transaction.amount,
            transactionDate: transaction.transactionDate,
            comment: transaction.comment,
            createdAt: transaction.createdAt,
            updatedAt: transaction.updatedAt,
          ),
        );
      } catch (_) {
        continue;
      }
    }
    return responses;
  }

  Future<void> saveTransactionsForPeriod(
    List<TransactionResponse> transactions,
    DateTime startDate,
    DateTime endDate,
  ) async {
    log(
      'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ ${startDate.toIso8601String().substring(0, 10)} - ${endDate.toIso8601String().substring(0, 10)} –≤ –∫—ç—à: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      name: 'TransactionRepo',
    );
    final startDateStr = startDate.toIso8601String().substring(0, 10);
    final endDateStr = endDate.toIso8601String().substring(0, 10);
    final maps =
        transactions
            .map(
              (t) => {
                'id': t.id.toString(),
                'amount': double.tryParse(t.amount) ?? 0.0,
                'category': t.category.id.toString(),
                'date': t.transactionDate.toIso8601String().substring(0, 10),
                'note': t.comment ?? '',
              },
            )
            .toList();
    await _transactionDatabase.saveTransactionsForPeriod(
      maps,
      startDateStr,
      endDateStr,
    );
    log(
      '‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à',
      name: 'TransactionRepo',
    );
  }

  Future<List<TransactionResponse>> getTransactionsForPeriod(
    DateTime startDate,
    DateTime endDate,
  ) async {
    final startDateStr = startDate.toIso8601String().substring(0, 10);
    final endDateStr = endDate.toIso8601String().substring(0, 10);
    final maps = await _transactionDatabase.getTransactionsByPeriod(
      startDateStr,
      endDateStr,
    );
    log(
      'üìä getTransactionsForPeriod: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î ${maps.length} –∑–∞–ø–∏—Å–µ–π',
      name: 'TransactionRepo',
    );

    final List<TransactionResponse> responses = [];
    for (int i = 0; i < maps.length; i++) {
      final map = maps[i];
      log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø–∏—Å—å $i: $map', name: 'TransactionRepo');

      final transaction = Transaction(
        id: int.tryParse(map['id'].toString()) ?? 0,
        accountId: 0, // –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        categoryId: int.tryParse(map['category'].toString()) ?? 0,
        amount: map['amount'].toString(),
        transactionDate: DateTime.parse(map['date']),
        comment: map['note'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      log(
        'üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: id=${transaction.id}, categoryId=${transaction.categoryId}, amount=${transaction.amount}',
        name: 'TransactionRepo',
      );

      try {
        final category = await _getCategoryById(transaction.categoryId);
        log(
          'üìä –ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: id=${category.id}, name=${category.name}, isIncome=${category.isIncome}',
          name: 'TransactionRepo',
        );

        final account = await _getAccountBriefById(transaction.accountId);
        log(
          'üìä –ü–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: id=${account.id}, name=${account.name}',
          name: 'TransactionRepo',
        );

        final response = TransactionResponse(
          id: transaction.id,
          account: account,
          category: category,
          amount: transaction.amount,
          transactionDate: transaction.transactionDate,
          comment: transaction.comment,
          createdAt: transaction.createdAt,
          updatedAt: transaction.updatedAt,
        );

        log(
          'üìä –°–æ–∑–¥–∞–Ω TransactionResponse: id=${response.id}, category=${response.category.name}, isIncome=${response.category.isIncome}',
          name: 'TransactionRepo',
        );
        responses.add(response);
      } catch (e) {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ $i: $e', name: 'TransactionRepo');
        continue;
      }
    }

    log(
      'üìä getTransactionsForPeriod: –∏—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ ${responses.length} TransactionResponse',
      name: 'TransactionRepo',
    );
    return responses;
  }
}
