import 'dart:async';
import 'dart:math';
import 'package:flutter/services.dart';
import 'package:sensors_plus/sensors_plus.dart';
import 'package:shmr_finance/domain/cubit/blur_cubit.dart';

class BalanceVisibilityService {
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä—è—Å–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è –º–µ–Ω—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  static const double _shakeThreshold = 25.0; // –±—ã–ª–æ 15.0
  static const int _shakeTimeWindow = 800; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 500)
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –º–µ–Ω—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  static const double _upsideDownThreshold = -0.9; // z-–æ—Å—å (–±—ã–ª–æ -0.8)
  static const int _orientationDebounceTime = 2000; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
  
  StreamSubscription<AccelerometerEvent>? _accelerometerSubscription;
  StreamSubscription<GyroscopeEvent>? _gyroscopeSubscription;
  
  List<DateTime> _shakeEvents = [];
  DateTime? _lastOrientationChange;
  BlurCubit? _blurCubit;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize(BlurCubit blurCubit) async {
    _blurCubit = blurCubit;
    _startListening();
    print('üì± BalanceVisibilityService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  // –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
  void _startListening() {
    _accelerometerSubscription = accelerometerEvents.listen(_handleAccelerometer);
    _gyroscopeSubscription = gyroscopeEvents.listen(_handleGyroscope);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ (—Ç—Ä—è—Å–∫–∞)
  void _handleAccelerometer(AccelerometerEvent event) {
    final magnitude = sqrt(event.x * event.x + event.y * event.y + event.z * event.z);
    
    if (magnitude > _shakeThreshold) {
      _shakeEvents.add(DateTime.now());
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è —Ç—Ä—è—Å–∫–∏
      _shakeEvents.removeWhere((time) => 
        DateTime.now().difference(time).inMilliseconds > _shakeTimeWindow);
      
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–±—ã—Ç–∏–π —Ç—Ä—è—Å–∫–∏ –≤ –æ–∫–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
      if (_shakeEvents.length >= 4) { // –±—ã–ª–æ 3
        _toggleBalanceVisibility();
        _shakeEvents.clear();
      }
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–∏—Ä–æ—Å–∫–æ–ø–∞ (–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç)
  void _handleGyroscope(GyroscopeEvent event) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (z-–æ—Å—å) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    if (event.z < _upsideDownThreshold) {
      final now = DateTime.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
      if (_lastOrientationChange == null || 
          now.difference(_lastOrientationChange!).inMilliseconds > _orientationDebounceTime) {
        _lastOrientationChange = now;
        _toggleBalanceVisibility();
      }
    }
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
  void _toggleBalanceVisibility() {
    if (_blurCubit != null) {
      _blurCubit!.toggleBalanceVisibility();
      
      // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      HapticFeedback.lightImpact();
      
      print('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Å–µ–Ω—Å–æ—Ä');
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _accelerometerSubscription?.cancel();
    _gyroscopeSubscription?.cancel();
    _blurCubit = null;
  }
} 