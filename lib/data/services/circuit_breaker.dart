import 'dart:async';
import 'dart:developer';

/// –°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker
enum CircuitBreakerState {
  closed,   // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
  open,     // –†–∞–∑–æ–º–∫–Ω—É—Ç - –∑–∞–ø—Ä–æ—Å—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è
  halfOpen, // –ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
}

/// Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫
class CircuitBreaker {
  final int failureThreshold;
  final Duration timeout;
  final Duration resetTimeout;
  
  CircuitBreakerState _state = CircuitBreakerState.closed;
  int _failureCount = 0;
  DateTime? _lastFailureTime;
  Timer? _resetTimer;

  CircuitBreaker({
    this.failureThreshold = 5,
    this.timeout = const Duration(seconds: 60),
    this.resetTimeout = const Duration(seconds: 30),
  });

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  bool get canExecute => _state != CircuitBreakerState.open;

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  CircuitBreakerState get state => _state;

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞—â–∏—Ç–æ–π Circuit Breaker
  Future<T> execute<T>(Future<T> Function() function) async {
    if (!canExecute) {
      throw CircuitBreakerOpenException('Circuit breaker is open');
    }

    try {
      final result = await function();
      _onSuccess();
      return result;
    } catch (e) {
      _onFailure();
      rethrow;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  void _onSuccess() {
    _failureCount = 0;
    _lastFailureTime = null;
    
    if (_state == CircuitBreakerState.halfOpen) {
      _close();
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
  void _onFailure() {
    _failureCount++;
    _lastFailureTime = DateTime.now();

    if (_state == CircuitBreakerState.halfOpen) {
      _open();
    } else if (_state == CircuitBreakerState.closed && 
               _failureCount >= failureThreshold) {
      _open();
    }
  }

  /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Circuit Breaker
  void _open() {
    _state = CircuitBreakerState.open;
    log('üî¥ Circuit Breaker opened after $_failureCount failures', name: 'CircuitBreaker');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ half-open —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    _resetTimer?.cancel();
    _resetTimer = Timer(resetTimeout, () {
      _halfOpen();
    });
  }

  /// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç Circuit Breaker –≤ half-open —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  void _halfOpen() {
    _state = CircuitBreakerState.halfOpen;
    log('üü° Circuit Breaker half-open - testing recovery', name: 'CircuitBreaker');
  }

  /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç Circuit Breaker
  void _close() {
    _state = CircuitBreakerState.closed;
    _failureCount = 0;
    _lastFailureTime = null;
    _resetTimer?.cancel();
    log('üü¢ Circuit Breaker closed', name: 'CircuitBreaker');
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç Circuit Breaker
  void reset() {
    _close();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Map<String, dynamic> get stats => {
    'state': _state.toString(),
    'failureCount': _failureCount,
    'lastFailureTime': _lastFailureTime?.toIso8601String(),
    'canExecute': canExecute,
  };

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  void dispose() {
    _resetTimer?.cancel();
  }
}

/// –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ Circuit Breaker
class CircuitBreakerOpenException implements Exception {
  final String message;
  
  CircuitBreakerOpenException(this.message);
  
  @override
  String toString() => 'CircuitBreakerOpenException: $message';
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä Circuit Breaker –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
class CircuitBreakerManager {
  final Map<String, CircuitBreaker> _breakers = {};
  final int failureThreshold;
  final Duration timeout;
  final Duration resetTimeout;

  CircuitBreakerManager({
    this.failureThreshold = 5,
    this.timeout = const Duration(seconds: 60),
    this.resetTimeout = const Duration(seconds: 30),
  });

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç Circuit Breaker –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
  CircuitBreaker getBreaker(String endpoint) {
    return _breakers.putIfAbsent(endpoint, () => CircuitBreaker(
      failureThreshold: failureThreshold,
      timeout: timeout,
      resetTimeout: resetTimeout,
    ));
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å Circuit Breaker –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
  Future<T> execute<T>(String endpoint, Future<T> Function() function) async {
    final breaker = getBreaker(endpoint);
    return await breaker.execute(function);
  }

  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ Circuit Breaker
  void resetAll() {
    for (final breaker in _breakers.values) {
      breaker.reset();
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö Circuit Breaker
  Map<String, Map<String, dynamic>> getStats() {
    return _breakers.map((endpoint, breaker) => 
      MapEntry(endpoint, breaker.stats));
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  void dispose() {
    for (final breaker in _breakers.values) {
      breaker.dispose();
    }
    _breakers.clear();
  }
} 