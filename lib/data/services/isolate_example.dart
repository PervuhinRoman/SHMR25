import 'dart:developer';
import 'api_service.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç—ã
class IsolateExample {
  final ApiService _apiService = ApiService();

  /// –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  Future<void> exampleLargeTransactions() async {
    try {
      log('üîÑ –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...', name: 'IsolateExample');
      
      // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç
      // –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50KB
      final transactions = await _apiService.getPeriodTransactionsByAccount(
        1,
        startDate: DateTime.now().subtract(const Duration(days: 90)), // 3 –º–µ—Å—è—Ü–∞
        endDate: DateTime.now(),
      );
      
      log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${transactions.length} –∑–∞–ø–∏—Å–µ–π', name: 'IsolateExample');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
      for (int i = 0; i < transactions.take(3).length; i++) {
        final transaction = transactions[i];
        log('üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i + 1}: ${transaction.amount} - ${transaction.category.name}', name: 'IsolateExample');
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: $e', name: 'IsolateExample');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Future<void> exampleCategories() async {
    try {
      log('üìÇ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...', name: 'IsolateExample');
      
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ã—á–Ω–æ –Ω–µ–±–æ–ª—å—à–∏–µ, –Ω–æ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ä–∞–∑–º–µ—Ä
      final categories = await _apiService.getCategories();
      
      log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${categories.length}', name: 'IsolateExample');
      
      final incomeCategories = categories.where((c) => c.isIncome).toList();
      final expenseCategories = categories.where((c) => !c.isIncome).toList();
      
      log('üí∞ –î–æ—Ö–æ–¥—ã: ${incomeCategories.length}, –†–∞—Å—Ö–æ–¥—ã: ${expenseCategories.length}', name: 'IsolateExample');
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e', name: 'IsolateExample');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
  Future<void> exampleAccounts() async {
    try {
      log('üè¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞...', name: 'IsolateExample');
      
      final accounts = await _apiService.getAccounts();
      
      log('‚úÖ –°—á–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã: ${accounts.length}', name: 'IsolateExample');
      
      for (final account in accounts) {
        log('üí∞ –°—á–µ—Ç: ${account.name} - ${account.balance} ${account.currency}', name: 'IsolateExample');
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤: $e', name: 'IsolateExample');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä —Å–∏–º—É–ª—è—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> simulateLargeData() async {
    try {
      log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...', name: 'IsolateExample');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      final futures = <Future>[];
      
      // –ó–∞–ø—Ä–æ—Å—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
      for (int i = 1; i <= 3; i++) {
        futures.add(_apiService.getPeriodTransactionsByAccount(
          1,
          startDate: DateTime.now().subtract(Duration(days: 30 * i)),
          endDate: DateTime.now().subtract(Duration(days: 30 * (i - 1))),
        ));
      }
      
      final results = await Future.wait(futures);
      
      for (int i = 0; i < results.length; i++) {
        final transactions = results[i] as List;
        log('üìä –ü–µ—Ä–∏–æ–¥ ${i + 1}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', name: 'IsolateExample');
      }
      
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: $e', name: 'IsolateExample');
    }
  }

  /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  Future<void> demonstratePerformance() async {
    try {
      log('‚è±Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...', name: 'IsolateExample');
      
      final startTime = DateTime.now();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–ª—è—Ç
      final transactions = await _apiService.getPeriodTransactionsByAccount(
        1,
        startDate: DateTime.now().subtract(const Duration(days: 60)),
        endDate: DateTime.now(),
      );
      
      final duration = DateTime.now().difference(startTime);
      
      log(
        'üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ ${duration.inMilliseconds}ms',
        name: 'IsolateExample',
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      if (transactions.isNotEmpty) {
        final avgTime = duration.inMicroseconds / transactions.length;
        log('üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${avgTime.toStringAsFixed(2)}Œºs', name: 'IsolateExample');
      }
      
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: $e', name: 'IsolateExample');
    }
  }

  /// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
  Future<void> runAllExamples() async {
    log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç—ã', name: 'IsolateExample');
    
    await exampleCategories();
    await exampleAccounts();
    await exampleLargeTransactions();
    await simulateLargeData();
    await demonstratePerformance();
    
    log('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', name: 'IsolateExample');
  }
} 