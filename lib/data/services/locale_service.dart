import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:developer';

class LocaleService extends ChangeNotifier {
  static const String _localeKey = 'selected_locale';
  static const String _defaultLocale = 'ru';

  static final LocaleService _instance = LocaleService._internal();
  factory LocaleService() => _instance;
  LocaleService._internal();

  Locale _currentLocale = const Locale('ru');
  bool _isInitialized = false;

  Locale get currentLocale => _currentLocale;
  bool get isInitialized => _isInitialized;

  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏
  static const List<Locale> supportedLocales = [
    Locale('ru', ''), // –†—É—Å—Å–∫–∏–π
    Locale('en', ''), // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
  ];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      final prefs = await SharedPreferences.getInstance();
      final savedLocale = prefs.getString(_localeKey) ?? _defaultLocale;

      _currentLocale = Locale(savedLocale);
      _isInitialized = true;

      log('üåç LocaleService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', name: 'Locale');
      log('  - –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞–ª—å: ${_currentLocale.languageCode}', name: 'Locale');
      log(
        '  - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏: ${supportedLocales.map((l) => l.languageCode).join(', ')}',
        name: 'Locale',
      );
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocaleService: $e', name: 'Locale');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentLocale = const Locale(_defaultLocale);
      _isInitialized = true;
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏
  Future<void> setLocale(Locale newLocale) async {
    if (!supportedLocales.contains(newLocale)) {
      log(
        '‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ª–æ–∫–∞–ª—å: ${newLocale.languageCode}',
        name: 'Locale',
      );
      return;
    }

    if (_currentLocale == newLocale) return;

    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_localeKey, newLocale.languageCode);

      _currentLocale = newLocale;
      notifyListeners();

      log('üåç –õ–æ–∫–∞–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newLocale.languageCode}', name: 'Locale');
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏: $e', name: 'Locale');
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞
  Future<void> setLocaleByCode(String languageCode) async {
    final newLocale = Locale(languageCode);
    await setLocale(newLocale);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏
  String getLocaleName(Locale locale) {
    switch (locale.languageCode) {
      case 'ru':
        return '–†—É—Å—Å–∫–∏–π';
      case 'en':
        return 'English';
      default:
        return locale.languageCode.toUpperCase();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
  String get currentLocaleName => getLocaleName(_currentLocale);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞–ª—å —Ä—É—Å—Å–∫–æ–π
  bool get isRussian => _currentLocale.languageCode == 'ru';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π
  bool get isEnglish => _currentLocale.languageCode == 'en';

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
  Future<void> toggleLocale() async {
    if (isRussian) {
      await setLocaleByCode('en');
    } else {
      await setLocaleByCode('ru');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
  List<MapEntry<Locale, String>> get availableLocales {
    return supportedLocales
        .map((locale) => MapEntry(locale, getLocaleName(locale)))
        .toList();
  }

  // –°–±—Ä–æ—Å –∫ –ª–æ–∫–∞–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  Future<void> resetToDefault() async {
    await setLocaleByCode(_defaultLocale);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  Map<String, dynamic> getCurrentState() {
    return {
      'currentLocale': _currentLocale.languageCode,
      'currentLocaleName': currentLocaleName,
      'isRussian': isRussian,
      'isEnglish': isEnglish,
      'isInitialized': _isInitialized,
      'supportedLocales': supportedLocales.map((l) => l.languageCode).toList(),
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  @override
  void dispose() {
    super.dispose();
    _isInitialized = false;
    log('üåç LocaleService –æ—á–∏—â–µ–Ω', name: 'Locale');
  }
}
