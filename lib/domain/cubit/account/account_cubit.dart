import 'dart:developer';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:shmr_finance/domain/models/currency/currency.dart';

part 'account_state.dart';

class MyAccountCubit extends Cubit<MyAccountState> {
  static const String _currencyCodeKey = 'selected_currency_code';
  static const String _currencySymbolKey = 'selected_currency_symbol';
  static const String _accountNameKey = 'account_name';

  MyAccountCubit() : super(MyAccountState(selectedCurrency: Currencies.available.first, isLoading: true)) {
    _loadAccountData();
  }

  Future<void> _loadAccountData() async {
    try {
      log('üì± –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ SharedPreferences...', name: "–í–∞–ª—é—Ç–∞");
      final prefs = await SharedPreferences.getInstance();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–ª—é—Ç—É
      final currencyCode = prefs.getString(_currencyCodeKey);
      final currencySymbol = prefs.getString(_currencySymbolKey);
      log('üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–∞–ª—é—Ç—ã: $currencyCode, —Å–∏–º–≤–æ–ª: $currencySymbol', name: "–í–∞–ª—é—Ç–∞");
      
      Currency currency;
      if (currencyCode != null) {
        currency = Currencies.getByCode(currencyCode) ?? Currencies.available.first;
      } else {
        currency = Currencies.available.first;
      }
      log('üì± –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª—é—Ç–∞: ${currency.code}', name: "–í–∞–ª—é—Ç–∞");
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è —Å—á–µ—Ç–∞
      final accountName = prefs.getString(_accountNameKey) ?? '–ú–æ–π —Å—á—ë—Ç';
      log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–º—è —Å—á–µ—Ç–∞: $accountName', name: "–ò–º—è —Å—á—ë—Ç–∞");
      
      emit(state.copyWith(
        selectedCurrency: currency,
        accountName: accountName,
        isLoading: false,
      ));
      log('üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${state.selectedCurrency.code}, ${state.accountName}');
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: $e');
      emit(state.copyWith(isLoading: false));
    }
  }

  Future<void> setCurrency(Currency currency) async {
    log('üîÑ setCurrency –≤—ã–∑–≤–∞–Ω: ${currency.code} (${currency.symbol})', name: "–í–∞–ª—é—Ç–∞");
    await _saveCurrencyToPrefs(currency.code, currency.symbol);
    log('üíæ –í–∞–ª—é—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ SharedPreferences: ${currency.code} (${currency.symbol})', name: "–í–∞–ª—é—Ç–∞");
    emit(state.copyWith(selectedCurrency: currency));
    log('üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${state.selectedCurrency.code} (${state.selectedCurrency.symbol})', name: "–í–∞–ª—é—Ç–∞");
  }

  Future<void> setCurrencyByCode(String currencyCode) async {
    final currency = Currencies.getByCode(currencyCode);
    if (currency != null) {
      await setCurrency(currency);
    }
  }

  Future<void> setAccountName(String accountName) async {
    log('üîÑ setAccountName –≤—ã–∑–≤–∞–Ω: $accountName', name: "–ò–º—è —Å—á—ë—Ç–∞");
    await _saveAccountNameToPrefs(accountName);
    log('üíæ –ò–º—è —Å—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ SharedPreferences: $accountName', name: "–ò–º—è —Å—á—ë—Ç–∞");
    emit(state.copyWith(accountName: accountName));
    log('üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${state.accountName}', name: "–ò–º—è —Å—á—ë—Ç–∞");
  }

  Future<void> _saveCurrencyToPrefs(String code, String symbol) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_currencyCodeKey, code);
      await prefs.setString(_currencySymbolKey, symbol);
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: $e', name: "–í–∞–ª—é—Ç–∞");
    }
  }

  Future<void> _saveAccountNameToPrefs(String accountName) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_accountNameKey, accountName);
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å—á–µ—Ç–∞: $e', name: "–í–∞–ª—é—Ç–∞");
    }
  }
} 