import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'blur_state.dart';

class BlurCubit extends Cubit<BlurState> {
  static const String _balanceVisibleKey = 'balance_visible';
  
  BlurCubit() : super(const BlurState(isBalanceVisible: true, isLoading: true)) {
    _loadBalanceVisibility();
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ SharedPreferences
  Future<void> _loadBalanceVisibility() async {
    try {
      print('üì± –ó–∞–≥—Ä—É–∂–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ SharedPreferences...');
      final prefs = await SharedPreferences.getInstance();
      final isVisible = prefs.getBool(_balanceVisibleKey) ?? true;
      print('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${isVisible ? "–≤–∏–¥–∏–º—ã–π" : "—Å–∫—Ä—ã—Ç—ã–π"}');
      emit(state.copyWith(isBalanceVisible: isVisible, isLoading: false));
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏: $e');
      emit(state.copyWith(isLoading: false));
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ SharedPreferences
  Future<void> _saveBalanceVisibility() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_balanceVisibleKey, state.isBalanceVisible);
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${state.isBalanceVisible ? "–≤–∏–¥–∏–º—ã–π" : "—Å–∫—Ä—ã—Ç—ã–π"}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏: $e');
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
  Future<void> toggleBalanceVisibility() async {
    print('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞');
    final newVisibility = !state.isBalanceVisible;
    emit(state.copyWith(isBalanceVisible: newVisibility));
    await _saveBalanceVisibility();
    print('üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${newVisibility ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å"}');
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
  Future<void> setBalanceVisibility(bool isVisible) async {
    print('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞: ${isVisible ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å"}');
    emit(state.copyWith(isBalanceVisible: isVisible));
    await _saveBalanceVisibility();
    print('üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${isVisible ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å"}');
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å
  Future<void> showBalance() async {
    await setBalanceVisibility(true);
  }

  /// –°–∫—Ä—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å
  Future<void> hideBalance() async {
    await setBalanceVisibility(false);
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å–µ–Ω—Å–æ—Ä–æ–≤)
  void updateFromSensor(bool isVisible) {
    if (state.isBalanceVisible != isVisible) {
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–µ–Ω—Å–æ—Ä–∞: ${isVisible ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å"}');
      emit(state.copyWith(isBalanceVisible: isVisible));
      _saveBalanceVisibility();
    }
  }
} 