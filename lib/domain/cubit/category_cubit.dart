import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fuzzywuzzy/fuzzywuzzy.dart';
import 'package:shmr_finance/data/repositories/category_repo_imp.dart';
import 'package:shmr_finance/domain/models/category/category.dart';
import 'category_state.dart';

class CategoryCubit extends Cubit<CategoryState> {
  final CategoryRepoImpl _categoryRepo = CategoryRepoImpl();
  
  CategoryCubit() : super(const CategoryState(isLoading: true)) {
    loadAllCategories();
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Future<void> loadAllCategories() async {
    try {
      emit(state.copyWith(isLoading: true, error: null));
      print('üì± –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      
      final categories = await _categoryRepo.getAllCategories();
      
      emit(state.copyWith(
        categories: categories,
        filteredCategories: categories,
        isLoading: false,
      ));
      print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      emit(state.copyWith(
        isLoading: false,
        error: e.toString(),
      ));
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É (–¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã)
  Future<void> loadCategoriesByType(bool isIncome) async {
    try {
      emit(state.copyWith(isLoading: true, error: null));
      print('üì± –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${isIncome ? "–¥–æ—Ö–æ–¥–æ–≤" : "—Ä–∞—Å—Ö–æ–¥–æ–≤"}...');
      
      final categories = await _categoryRepo.getCategoriesByType(isIncome);
      
      emit(state.copyWith(
        categories: categories,
        filteredCategories: categories,
        isLoading: false,
      ));
      print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π ${isIncome ? "–¥–æ—Ö–æ–¥–æ–≤" : "—Ä–∞—Å—Ö–æ–¥–æ–≤"}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      emit(state.copyWith(
        isLoading: false,
        error: e.toString(),
      ));
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
  Future<void> loadExpenseCategories() async {
    await loadCategoriesByType(false);
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
  Future<void> loadIncomeCategories() async {
    await loadCategoriesByType(true);
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  void updateCategories(List<Category> categories) {
    emit(state.copyWith(
      categories: categories,
      filteredCategories: categories,
    ));
  }

  /// –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É
  void clearError() {
    emit(state.copyWith(error: null));
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å fuzzy search
  void searchCategories(String query) {
    if (query.isEmpty) {
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      emit(state.copyWith(
        searchQuery: query,
        filteredCategories: state.categories,
      ));
      return;
    }

    final results = <Category>[];
    final queryLower = query.toLowerCase();

    for (final category in state.categories) {
      // –ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final nameRatio = ratio(queryLower, category.name.toLowerCase());
      
      // –ò—â–µ–º –ø–æ —ç–º–æ–¥–∑–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —ç–º–æ–¥–∑–∏)
      final emojiRatio = ratio(queryLower, category.emoji);
      
      // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (60%), –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (nameRatio > 60 || emojiRatio > 60) {
        results.add(category);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    results.sort((a, b) {
      final aNameRatio = ratio(queryLower, a.name.toLowerCase());
      final aEmojiRatio = ratio(queryLower, a.emoji);
      final aMaxRatio = aNameRatio > aEmojiRatio ? aNameRatio : aEmojiRatio;
      
      final bNameRatio = ratio(queryLower, b.name.toLowerCase());
      final bEmojiRatio = ratio(queryLower, b.emoji);
      final bMaxRatio = bNameRatio > bEmojiRatio ? bNameRatio : bEmojiRatio;
      
      return bMaxRatio.compareTo(aMaxRatio); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    });

    emit(state.copyWith(
      searchQuery: query,
      filteredCategories: results,
    ));
    
    print('üîç –ü–æ–∏—Å–∫: "$query" - –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
  }

  /// –û—á–∏—â–∞–µ—Ç –ø–æ–∏—Å–∫
  void clearSearch() {
    emit(state.copyWith(
      searchQuery: '',
      filteredCategories: state.categories,
    ));
  }
} 