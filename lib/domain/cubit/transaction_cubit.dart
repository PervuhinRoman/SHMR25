import 'package:flutter_bloc/flutter_bloc.dart' show Cubit;
import 'package:shmr_finance/domain/cubit/sort_type_cubit.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:shmr_finance/domain/models/category/category.dart';
import 'package:shmr_finance/domain/models/category/combine_category.dart';

import '../../data/repositories/account_repo_imp.dart';
import '../../data/repositories/category_repo_imp.dart';
import '../../data/repositories/transaction_repo_imp.dart';
import '../models/transaction/transaction.dart';

part 'transaction_state.dart';

class TransactionCubit extends Cubit<TransactionState> {
  TransactionCubit()
    : super(
        TransactionState(transactions: [], status: TransactionStatus.loading),
      );

  final AccountRepoImp accountRepo = AccountRepoImp();
  final CategoryRepoImpl categoryRepo = CategoryRepoImpl();

  Future<void> fetchTransactions({
    DateTime? startDate,
    DateTime? endDate,
    required bool isIncome,
  }) async {
    print(
      'üéØ fetchTransactions –≤—ã–∑–≤–∞–Ω: isIncome=$isIncome, startDate=$startDate, endDate=$endDate',
    );
    final connectivityResult = await Connectivity().checkConnectivity();
    final hasInternet = connectivityResult != ConnectivityResult.none;
    if (!hasInternet) {
      print('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞');
      await fetchLocalTransactionsForPeriod(startDate, endDate, isIncome);
      return;
    }
    print('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏');
    try {
      final AccountRepoImp accountRepo = AccountRepoImp();
      final CategoryRepoImpl categoryRepo = CategoryRepoImpl();
      final TransactionRepoImp transactionRepo = TransactionRepoImp(
        accountRepo,
        categoryRepo,
      );
      print('üì° –í—ã–ø–æ–ª–Ω—è—é —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å...');
      final List<TransactionResponse> rawResponses = await transactionRepo
          .getPeriodTransactionsByAccount(
            1,
            startDate: startDate,
            endDate: endDate,
          );
      print('üì° –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ —Å–µ—Ç–∏: ${rawResponses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      for (int i = 0; i < rawResponses.length && i < 3; i++) {
        final response = rawResponses[i];
        print(
          'üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è $i: id=${response.id}, amount=${response.amount}, category=${response.category.name}, isIncome=${response.category.isIncome}',
        );
      }

      final responses =
          rawResponses
              .where((response) => response.category.isIncome == isIncome)
              .toList();
      print(
        'üì° –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ isIncome=$isIncome: ${responses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
      if (startDate != null && endDate != null) {
        await transactionRepo.saveTransactionsForPeriod(
          rawResponses,
          startDate,
          endDate,
        );
      } else {
        // Fallback –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        final today = DateTime.now();
        final todayTransactions =
            rawResponses
                .where(
                  (response) =>
                      response.transactionDate.year == today.year &&
                      response.transactionDate.month == today.month &&
                      response.transactionDate.day == today.day,
                )
                .map(
                  (r) => Transaction(
                    id: r.id,
                    accountId: r.account.id,
                    categoryId: r.category.id,
                    amount: r.amount,
                    transactionDate: r.transactionDate,
                    comment: r.comment,
                    createdAt: r.createdAt,
                    updatedAt: r.updatedAt,
                  ),
                )
                .toList();
        await transactionRepo.saveTodayTransactions(todayTransactions);
      }
      print(
        '‚úÖ –≠–º–∏—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${responses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—Ç–∞—Ç—É—Å: loaded, –∏—Å—Ç–æ—á–Ω–∏–∫: network',
      );
      if (!isClosed) {
        emit(
          state.copyWith(
            transactions: responses,
            status: TransactionStatus.loaded,
            dataSource: DataSource.network,
            isIncome: isIncome,
          ),
        );
        _updateCategoriesFromTransactions();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ —Å–µ—Ç–∏: $e');
      if (!isClosed) {
        emit(
          state.copyWith(error: e.toString(), status: TransactionStatus.error),
        );
      }
    }
  }

  Future<void> fetchLocalTransactions() async {
    print('üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    try {
      final AccountRepoImp accountRepo = AccountRepoImp();
      final CategoryRepoImpl categoryRepo = CategoryRepoImpl();
      final TransactionRepoImp transactionRepo = TransactionRepoImp(
        accountRepo,
        categoryRepo,
      );
      final responses = await transactionRepo.getTodayTransactions();
      print('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${responses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      if (!isClosed) {
        emit(
          state.copyWith(
            transactions: responses,
            status: TransactionStatus.loaded,
            dataSource: DataSource.cache,
          ),
        );
        _updateCategoriesFromTransactions();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –∫—ç—à–∞: $e');
      if (!isClosed) {
        emit(
          state.copyWith(
            transactions: [],
            status: TransactionStatus.error,
            error: e.toString(),
          ),
        );
      }
    }
  }

  Future<void> fetchLocalTransactionsForPeriod(
    DateTime? startDate,
    DateTime? endDate,
    bool isIncome,
  ) async {
    if (startDate == null || endDate == null) {
      print('üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è (fallback)');
      await fetchLocalTransactions();
      return;
    }
    print(
      'üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ ${startDate.toIso8601String().substring(0, 10)} - ${endDate.toIso8601String().substring(0, 10)}',
    );
    try {
      final AccountRepoImp accountRepo = AccountRepoImp();
      final CategoryRepoImpl categoryRepo = CategoryRepoImpl();
      final TransactionRepoImp transactionRepo = TransactionRepoImp(
        accountRepo,
        categoryRepo,
      );
      final responses = await transactionRepo.getTransactionsForPeriod(
        startDate,
        endDate,
      );
      print('üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${responses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      for (int i = 0; i < responses.length && i < 3; i++) {
        final response = responses[i];
        print(
          'üìä –ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è $i: id=${response.id}, amount=${response.amount}, category=${response.category.name}, isIncome=${response.category.isIncome}',
        );
      }

      final filteredResponses =
          responses
              .where((response) => response.category.isIncome == isIncome)
              .toList();
      print(
        'üì± –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ isIncome=$isIncome: ${filteredResponses.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      for (int i = 0; i < filteredResponses.length && i < 3; i++) {
        final response = filteredResponses[i];
        print(
          '‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è $i: id=${response.id}, amount=${response.amount}, category=${response.category.name}, isIncome=${response.category.isIncome}',
        );
      }

      if (!isClosed) {
        emit(
          state.copyWith(
            transactions: filteredResponses,
            status: TransactionStatus.loaded,
            dataSource: DataSource.cache,
            isIncome: isIncome,
          ),
        );
        _updateCategoriesFromTransactions();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –∫—ç—à–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: $e');
      if (!isClosed) {
        emit(
          state.copyWith(
            transactions: [],
            status: TransactionStatus.error,
            error: e.toString(),
          ),
        );
      }
    }
  }

  void sort(SortType sortType) {
    final sortedTransactions = List<TransactionResponse>.from(
      state.transactions,
    );

    sortedTransactions.sort((a, b) {
      switch (sortType) {
        case SortType.date:
          return b.transactionDate.compareTo(a.transactionDate);
        case SortType.amount:
          return double.parse(b.amount).compareTo(double.parse(a.amount));
      }
    });

    if (!isClosed) {
      emit(state.copyWith(transactions: sortedTransactions));
      _updateCategoriesFromTransactions();
    }
  }

  void _updateCategoriesFromTransactions() {
    if (!isClosed) {
      // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ isIncome
      final filtered = state.transactions.where((t) => t.category.isIncome == state.isIncome).toList();

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final Map<int, List<TransactionResponse>> grouped = {};
      for (final t in filtered) {
        grouped.putIfAbsent(t.category.id, () => []).add(t);
      }

      final combineCategories = grouped.entries.map((entry) {
        final category = entry.value.first.category;
        final totalAmount = entry.value.fold<double>(
          0,
          (sum, t) => sum + (double.tryParse(t.amount) ?? 0),
        );
        final lastTransaction = entry.value.isNotEmpty
            ? entry.value.reduce((a, b) => a.transactionDate.isAfter(b.transactionDate) ? a : b)
            : null;
        return CombineCategory(
          category: category,
          totalAmount: totalAmount,
          lastTransaction: lastTransaction,
        );
      }).toList();

      emit(state.copyWith(
        combineCategories: combineCategories,
      ));
    }
  }
}
