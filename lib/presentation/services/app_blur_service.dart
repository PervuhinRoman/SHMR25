import 'dart:async';
import 'dart:developer';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';

class AppBlurService {
  static const String _blurEnabledKey = 'app_blur_enabled';
  
  static final AppBlurService _instance = AppBlurService._internal();
  factory AppBlurService() => _instance;
  AppBlurService._internal();
  
  bool _isBlurEnabled = true;
  bool _isAppInBackground = false;
  VoidCallback? _onBlurStateChanged;
  
  bool get isBlurEnabled => _isBlurEnabled;
  bool get isAppInBackground => _isAppInBackground;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    await _loadSettings();
    log('üì± AppBlurService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', name: 'AppBlur');
    log('  - isBlurEnabled: $_isBlurEnabled', name: 'AppBlur');
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> _loadSettings() async {
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å SharedPreferences –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    _isBlurEnabled = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª—é—Ä–∞
  void setBlurStateCallback(VoidCallback callback) {
    _onBlurStateChanged = callback;
  }
  
  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–ª—é—Ä–∞
  Future<void> setBlurEnabled(bool enabled) async {
    if (_isBlurEnabled != enabled) {
      _isBlurEnabled = enabled;
      log('üîí App blur enabled: $enabled', name: 'AppBlur');
      
      // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ –∏ –±–ª—é—Ä –≤–∫–ª—é—á–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
      if (_isAppInBackground && _isBlurEnabled) {
        _applyBlur();
      } else if (!_isBlurEnabled) {
        _removeBlur();
      }
      
      _onBlurStateChanged?.call();
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  void handleAppLifecycleState(AppLifecycleState state) {
    switch (state) {
      case AppLifecycleState.paused:
      case AppLifecycleState.inactive:
        _handleAppBackground();
        break;
      case AppLifecycleState.resumed:
        _handleAppForeground();
        break;
      case AppLifecycleState.detached:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ
        break;
      case AppLifecycleState.hidden:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
        _handleAppBackground();
        break;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω
  void _handleAppBackground() {
    if (_isAppInBackground) return; // –£–∂–µ –≤ —Ñ–æ–Ω–µ
    
    _isAppInBackground = true;
    log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—à–ª–æ –≤ —Ñ–æ–Ω', name: 'AppBlur');
    
    if (_isBlurEnabled) {
      _applyBlur();
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
  void _handleAppForeground() {
    if (!_isAppInBackground) return; // –£–∂–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
    
    _isAppInBackground = false;
    log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω', name: 'AppBlur');
    
    _removeBlur();
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–ª—é—Ä–∞
  void _applyBlur() {
    if (!_isBlurEnabled) return;
    
    try {
      log('üîí –ë–ª—é—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω', name: 'AppBlur');
      _onBlurStateChanged?.call();
      
      // –•–∞–ø—Ç–∏–∫ —Ñ–∏–¥–±–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      HapticFeedback.lightImpact();
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–ª—é—Ä–∞: $e', name: 'AppBlur');
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é—Ä–∞
  void _removeBlur() {
    try {
      log('üîì –ë–ª—é—Ä —É–¥–∞–ª–µ–Ω', name: 'AppBlur');
      _onBlurStateChanged?.call();
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é—Ä–∞: $e', name: 'AppBlur');
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–ª—é—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  void forceApplyBlur() {
    if (_isBlurEnabled) {
      _applyBlur();
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  void forceRemoveBlur() {
    _removeBlur();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  Map<String, dynamic> getCurrentState() {
    return {
      'isBlurEnabled': _isBlurEnabled,
      'isAppInBackground': _isAppInBackground,
      'shouldShowBlur': _isBlurEnabled && _isAppInBackground,
    };
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _onBlurStateChanged = null;
    log('üì± AppBlurService –æ—á–∏—â–µ–Ω', name: 'AppBlur');
  }
} 