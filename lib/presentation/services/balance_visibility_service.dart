import 'dart:async';
import 'dart:developer';
import 'package:flutter/services.dart';
import 'package:sensors_plus/sensors_plus.dart';
import 'package:shmr_finance/domain/cubit/account/blur_cubit.dart';

class BalanceVisibilityService {
  static const double threshold = 5.0;
  static const int _orientationDebounceTime = 1000;

  StreamSubscription<GyroscopeEvent>? _gyroscopeSubscription;

  DateTime? _lastOrientationChange;
  BlurCubit? _blurCubit;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize(BlurCubit blurCubit) async {
    _blurCubit = blurCubit;
    _startListening();
    log('üì± BalanceVisibilityService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', name: 'Blur');
  }

  // –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
  void _startListening() {
    _gyroscopeSubscription = gyroscopeEventStream().listen(_handleGyroscope);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–∏—Ä–æ—Å–∫–æ–ø–∞ (–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç)
  void _handleGyroscope(GyroscopeEvent event) {
    if (event.y.abs() > threshold || event.x.abs() > threshold) {
      final now = DateTime.now();

      if (_lastOrientationChange == null ||
          now.difference(_lastOrientationChange!).inMilliseconds >
              _orientationDebounceTime) {
        _lastOrientationChange = now;
        _toggleBalanceVisibility();
      }
    }
  }

  void _toggleBalanceVisibility() {
    if (_blurCubit != null) {
      _blurCubit!.toggleBalanceVisibility();

      // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      HapticFeedback.mediumImpact();

      log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Å–µ–Ω—Å–æ—Ä', name: 'Blur');
    }
  }

  void dispose() {
    _gyroscopeSubscription?.cancel();
    _blurCubit = null;
  }
}
